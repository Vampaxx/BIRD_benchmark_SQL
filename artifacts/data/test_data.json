[
    {
        "Question": "Among the movie in which Dariusz Wolski works as the director of photography, what is the title of the one with the highest average vote? ==>> director of photography refers to job = 'Director of Photography'; highest average vote refers to max(vote_average)",
        "SQLQuery": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography' ORDER BY T1.vote_average DESC LIMIT 1",
        "SQLResult": "Result of the SQL query",
        "Answer": "The Martian"
    },
    {
        "Question": "List the film with the highest budget in each genre. ==>> highest budget refers to max(budget); each genre refers to genre_name; film also means movie; list the film refers to title of movie",
        "SQLQuery": "SELECT T3.genre_name, MAX(T1.budget) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id GROUP BY T3.genre_name",
        "SQLResult": "Result of the SQL query",
        "Answer": "Action,Adventure,Animation,Comedy,Crime,Documentary,Drama,Family,Fantasy,Foreign,History,Horror,Music,Mystery,Romance,Science Fiction,TV Movie,Thriller,War,Western"
    },
    {
        "Question": "What was David Rubin's job in the movie \"Days of Thunder\"? ==>> \"Days of Thunder\" refers to title = 'Days of Thunder'",
        "SQLQuery": "SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'David Rubin' AND T1.title = 'Days of Thunder'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Casting"
    },
    {
        "Question": "Which movie did the company 'Radiant Film GmbH' work on? ==>> Which movie refers to title; company 'Radiant Film GmbH' refers to company_name = 'Radiant Film GmbH'",
        "SQLQuery": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Radiant Film GmbH'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Das Boot"
    },
    {
        "Question": "Give the genre and popularity of movies whose revenue is at least 120,000,000 between 2012 and 2015. ==>> genre refers to genre_name; revenue is at least 120,000,000 refers to revenue > = 120000000; between 2012 and 2015 refers to release_date BETWEEN '2012-01-01' AND '2015-12-31'",
        "SQLQuery": "SELECT T3.genre_name, T1.popularity FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.revenue > 120000000 AND T1.release_date BETWEEN '2012-01-01' AND '2015-12-31'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Adventure,Fantasy,Action,Adventure,Action,Science Fiction,Adventure,Action,Thriller,Action,Comedy,Science Fiction,Adventure,Action,Thriller,Science Fiction,Action,Thriller,Fantasy,Drama,Horror,Action,War,Drama,Action,Thriller,Crime,Action,Thriller,Drama,Thriller,Science Fiction,Adventure,Fantasy,Action,Adventure,Fantasy,Animation,Comedy,Family,Adventure,Fantasy,Action,Science Fiction,Adventure,Action,Science Fiction,Adventure,Fantasy,Drama,Romance,Fantasy,Horror,Action,Action,War,Adventure,Action,Science Fiction,Adventure,Fantasy,Adventure,Adventure,Animation,Comedy,Family,Adventure,Fantasy,Drama,Action,Thriller,Action,Comedy,Romance,Fantasy,Horror,Action,Adventure,Fantasy,Animation,Action,Comedy,Family,Animation,Family,Fantasy,Comedy,Adventure,Fantasy,Drama,Comedy,Science Fiction,Family,Drama,Romance,Adventure,Fantasy,Drama,Action,Action,Comedy,Crime,Drama,Horror,Thriller,Drama,Western,Adventure,Action,Science Fiction,Drama,Action,Thriller,Science Fiction,Adventure,Action,Science Fiction,Adventure,Fantasy,Family,Drama,Thriller,Adventure,Fantasy,Science Fiction,Adventure,Science Fiction,Mystery,Comedy,Horror,Action,Science Fiction,Fantasy,Comedy,Drama,Horror,Action,Thriller,Science Fiction,Adventure,Action,Science Fiction,Adventure,Action,Thriller,Science Fiction,Drama,Romance,Drama,History,Adventure,Action,Science Fiction,Mystery,Drama,Thriller,Crime,Adventure,Action,Thriller,Adventure,Fantasy,Action,Science Fiction,Drama,History,Adventure,Fantasy,Family,Adventure,Fantasy,Action,Adventure,Action,Thriller,Science Fiction,Fantasy,Animation,Comedy,Family,Comedy,Drama,Thriller,Science Fiction,Adventure,Fantasy,Action,Science Fiction,Drama,Comedy,Fantasy,Animation,Comedy,Family,Animation,Family,Adventure,Animation,Family,Adventure,Action,Science Fiction,Drama,Thriller,Animation,Family,Fantasy,Action,Family,Fantasy,Animation,Family,Action,Thriller,Crime,Adventure,Animation,Comedy,Family,Drama,Comedy,Romance,Drama,Music,Romance,Adventure,Action,Science Fiction,Adventure,Fantasy,Animation,Action,Comedy,Family,Adventure,Animation,Family,Horror,Drama,Science Fiction,Drama,Music,Romance,Adventure,Drama,Adventure,Action,Thriller,Science Fiction,Drama,Adventure,Drama,Action,Adventure,Action,Science Fiction,Animation,Comedy,Family,Action,Science Fiction,Drama,History,Thriller,Adventure,Fantasy,Action,Comedy,Science Fiction,Adventure,Action,Science Fiction,Comedy,Adventure,Action,Science Fiction,Adventure,Action,Science Fiction,Adventure,Fantasy,Action,Adventure,Fantasy,Action,Romance,Family,Adventure,Action,Science Fiction,Adventure,Animation,Family,Drama,Comedy,Crime,Action,Thriller,Action,Comedy,Comedy,Comedy,Crime,Comedy,Adventure,Animation,Family,Animation,Comedy,Family,Comedy,Family,Adventure,Fantasy,Animation,Family,Adventure,Fantasy,Drama,Comedy,Drama,Action,Thriller,Action,Thriller,Adventure,Action,Science Fiction,Drama,Action,Thriller,Science Fiction,Drama,Comedy,Adventure,Fantasy,Action,Adventure,Fantasy,Action,Science Fiction,Adventure,Thriller,Science Fiction,Adventure,Action,Science Fiction,Horror,Adventure,Action,Thriller,Science Fiction,Action,Comedy,Crime,Action,Comedy,Crime,Drama,Action,Thriller,Crime,Comedy,Adventure,Fantasy,Animation,Comedy,Family,Action,Science Fiction,Adventure,Action,Thriller,Comedy,Crime,Horror,Thriller,Drama,Thriller,Crime,Adventure,Drama,Action,Animation,Drama,Comedy,Family,Fantasy,Drama,Romance,Family,Drama,Action,History,War,Action,Thriller,Crime,Adventure,Drama,Science Fiction,Adventure,Action,Science Fiction,Adventure,Science Fiction,Mystery,Family,Animation,Comedy,Family,Adventure,Action,Science Fiction,Action,Action,Comedy,Drama,Crime,Adventure,Animation,Comedy,Family,Adventure,Animation,Action,Comedy,Family,Adventure,Action,Thriller,Adventure,Fantasy,Comedy,Family,Adventure,Action,Action,Comedy,Crime,Action,War,Comedy,Romance,Drama,Action,Thriller,War,Comedy,Comedy,Drama,Comedy,Family,Action,Thriller,Science Fiction,Mystery,Drama,History,Thriller,War,Adventure,Action,Crime,Comedy,Drama,Thriller,Mystery,Adventure,Animation,Comedy,Family,Comedy,Drama,Thriller,Romance,Action,Thriller,Drama,Romance,Fantasy,Comedy,Music,Action,Thriller,Mystery,Comedy,Drama,War,Animation,Drama,Action,War,Fantasy,Animation,Comedy,Science Fiction,Family,Adventure,Animation,Comedy,Family,Comedy,Action,Science Fiction,Action,Thriller,Horror,Adventure,Drama,Drama,Action,Thriller,Comedy,Music,Drama,Comedy,Crime,Romance,Action,Thriller,Crime,Comedy,Action,Comedy,Science Fiction,Adventure,Horror,Comedy,Adventure,Animation,Comedy,Family,Action,Thriller,Adventure,Thriller,Science Fiction,Drama,Comedy,Music,Adventure,Fantasy,Family,Drama,Romance,Adventure,Animation,Comedy,Family,Comedy,Drama,Western,Crime,Mystery,Comedy,Adventure,Fantasy,Action,Drama,Music,Adventure,Drama,Western,Thriller,Adventure,Drama,Science Fiction,Action,Drama,Thriller,Adventure,Drama,Action"
    },
    {
        "Question": "Find out the popularity of the movies with the highest vote count. ==>> highest vote count refers to max(vote_count)",
        "SQLQuery": "SELECT popularity FROM movie ORDER BY vote_COUNT DESC LIMIT 1",
        "SQLResult": "Result of the SQL query",
        "Answer": "167.58371"
    },
    {
        "Question": "What was the job of Dariusz Wolski in the movie \"Pirates of the Caribbean: At World's End\"? ==>> movie \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "SQLQuery": "SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T3.person_name = 'Dariusz Wolski'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Director of Photography"
    },
    {
        "Question": "Are there any post-production movies in Nederlands? ==>> post-production movies refers to movie_status = 'Post Production'; Nederlands refers to language_name = 'Nederlands';",
        "SQLQuery": "SELECT DISTINCT CASE WHEN T1.movie_status = 'Post Production' THEN 'YES' ELSE 'NO' END AS YORN FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Nederlands'",
        "SQLResult": "Result of the SQL query",
        "Answer": "NO"
    },
    {
        "Question": "Provide the title of the movie that is most-liked by a large number of people. ==>> most-liked by a large number of people refers to max(popularity)",
        "SQLQuery": "SELECT title FROM movie ORDER BY popularity DESC LIMIT 1",
        "SQLResult": "Result of the SQL query",
        "Answer": "Minions"
    },
    {
        "Question": "What is the ratio between male and female cast members of the movie 'Iron Man?' Count how many have unspecified genders. ==>> male refers to gender = 'Male'; female refers to gender = 'Female'; movie 'Iron Man' refers to title = 'Iron Man'; ratio = divide(sum(gender = 'Female'), sum(gender = 'Male'))",
        "SQLQuery": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS RATIO , COUNT(CASE WHEN T3.gender = 'Unspecified' THEN 1 ELSE NULL END) AS UNGENDERS FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Iron Man'",
        "SQLResult": "Result of the SQL query",
        "Answer": "1.875"
    },
    {
        "Question": "How many movies released in 1995 did Quentin Tarantino appear in? ==>> released in 1995 refers to release_date LIKE '1995%'",
        "SQLQuery": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Quentin Tarantino' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 1995",
        "SQLResult": "Result of the SQL query",
        "Answer": "2"
    },
    {
        "Question": "List the movies in the Somali language. ==>> List the movies refers to title; Somali language refers to language_name = 'Somali'",
        "SQLQuery": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Somali'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Black Hawk Down,Dirty Pretty Things,Captain Phillips"
    },
    {
        "Question": "What is the title of the first crime movie ever released? ==>> first crime movie ever released refers to min(release_date) and genre_name = 'Crime'",
        "SQLQuery": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Crime' ORDER BY T1.release_date LIMIT 1",
        "SQLResult": "Result of the SQL query",
        "Answer": "The Lady from Shanghai"
    },
    {
        "Question": "Among the movie in which Dariusz Wolski works as the director of photography, what is the percentage of those movie whose vote average is over 5.0? ==>> director of photography refers to job = 'Director of Photography'; vote average is over 8.0 refers to vote_average > 5; percentage = divide(sum(movie_id) when vote_average > 5, count(movie_id)) as percentage",
        "SQLQuery": "SELECT CAST(COUNT(CASE WHEN T1.vote_average > 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.vote_average) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'",
        "SQLResult": "Result of the SQL query",
        "Answer": "94.73684210526316"
    },
    {
        "Question": "How many animators does Movie No. 129 have? ==>> animators refers to job = 'Animation'; Movie No. 129 refers to movie_id = 129",
        "SQLQuery": "SELECT COUNT(movie_id) FROM movie_crew WHERE movie_id = 129 AND job = 'Animation'",
        "SQLResult": "Result of the SQL query",
        "Answer": "13"
    },
    {
        "Question": "When was the release date of the latest movie in which Dariusz Wolski worked as a crew member? ==>> release date of the latest movie refers to max(release_date)",
        "SQLQuery": "SELECT T1.release_date FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' ORDER BY T1.release_date DESC LIMIT 1",
        "SQLResult": "Result of the SQL query",
        "Answer": "2015-09-30"
    },
    {
        "Question": "What is the average revenue of the movie in which Dariusz Wolski works as the director of photography? ==>> director of photography refers to job = 'Director of Photography'; average revenue = divide(sum(revenue), count(movie_id))",
        "SQLQuery": "SELECT CAST(SUM(T1.revenue) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'",
        "SQLResult": "Result of the SQL query",
        "Answer": "368497595.57894737"
    },
    {
        "Question": "State the genre of the movie title with a runtime of only 14 minutes. ==>> genre refers to genre_name; runtime of only 14 minutes refers to runtime = 14",
        "SQLQuery": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.runtime = 14",
        "SQLResult": "Result of the SQL query",
        "Answer": "Horror,Science Fiction"
    },
    {
        "Question": "Find the difference in percentage of the movies under keywords of \"woman director\" and \"independent film\". ==>> under keywords of \"woman director\" and \"independent film\" refers to keyword_name = 'woman director' and keyword_name = 'independent film'; difference in percentage = divide(subtract(count(movie_id) when keyword_name = 'woman director', count(movie_id) when keyword_name = 'independent film'), count(movie_id)) as percentage",
        "SQLQuery": "SELECT CAST((SUM(CASE WHEN T1.keyword_name = 'woman director' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END) FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id",
        "SQLResult": "Result of the SQL query",
        "Answer": "1.8867924528301887"
    },
    {
        "Question": "Which production company produced the movie that made the most money at the box office? ==>> Which production company refers to company_name; most money at the box office refers to max(revenue)",
        "SQLQuery": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id GROUP BY T1.company_id ORDER BY SUM(T3.revenue) DESC LIMIT 1",
        "SQLResult": "Result of the SQL query",
        "Answer": "Warner Bros."
    },
    {
        "Question": "List the character names in the \"Open Water\" movie. ==>> \"Open Water\" movie refers to title = 'Open Water'",
        "SQLQuery": "SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Open Water'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Susan Watkins,Daniel Kintner,Seth,Davis,Linda,Junior"
    },
    {
        "Question": "What is the genre of the movie title which was well-received by the audiences but made the lowest revenue? ==>> genre refers to genre_name; well-received by the audiences refers to max(vote_average); lowest revenue refers to min(revenue)",
        "SQLQuery": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id ORDER BY T1.vote_average DESC, T1.revenue LIMIT 1",
        "SQLResult": "Result of the SQL query",
        "Answer": "Comedy"
    },
    {
        "Question": "What keyword can the user use to search for the movie Finding Nemo? ==>> What keyword refers to keyword_name; Finding Nemo refers to title = 'Finding Nemo'",
        "SQLQuery": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.title = 'Finding Nemo'",
        "SQLResult": "Result of the SQL query",
        "Answer": "father son relationship,harbor,underwater,fish tank,great barrier reef,missing child,aftercreditsstinger,duringcreditsstinger,short term memory loss,clownfish,father son reunion,protective father"
    },
    {
        "Question": "How many female crews are in the movie \"Mr. Smith Goes to Washington\"? ==>> female crews refers to gender = 'Female'; \"Mr. Smith Goes to Washington\" refers to title = 'Mr. Smith Goes to Washington'",
        "SQLQuery": "SELECT COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Mr. Smith Goes to Washington' AND T3.gender = 'Female'",
        "SQLResult": "Result of the SQL query",
        "Answer": "14"
    },
    {
        "Question": "How many production companies does the movie \"Four Rooms\" have? ==>> movie \"Four Rooms\" refers to title = 'Four Rooms'",
        "SQLQuery": "SELECT COUNT(CNAME) FROM ( SELECT T1.company_name AS CNAME FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms' )",
        "SQLResult": "Result of the SQL query",
        "Answer": "2"
    },
    {
        "Question": "The movie 'Gojira ni-sen mireniamu' is from which country? ==>> movie 'Gojira ni-sen mireniamu' refers to title = 'Gojira ni-sen mireniamu'; which country refers to country_name",
        "SQLQuery": "SELECT T3.COUNTry_name FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T1.title = 'Gojira ni-sen mireniamu'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Japan"
    },
    {
        "Question": "Provide the overview for the movie \"The Pacifier\". ==>> movie \"The Pacifier\" refers to title = 'The Pacifier'",
        "SQLQuery": "SELECT overview FROM movie WHERE title = 'The Pacifier'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Disgraced Navy SEAL Shane Wolfe is handed a new assignment: Protect the five Plummer kids from enemies of their recently deceased father -- a government scientist whose top-secret experiment remains hidden in the kids' house."
    },
    {
        "Question": "How many films released between 1/2/1990 and 12/30/2000 starred Uma Thurman? ==>> released between 1/2/1990 and 12/30/2000 refers to release_date BETWEEN '1990-01-02' AND '2000-12-30'; film has the same meaning as movie; starred Uma Thurman refers to person_name = 'Uma Thurman'",
        "SQLQuery": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Uma Thurman' AND T1.release_date BETWEEN '1990-01-01' AND '2000-12-31'",
        "SQLResult": "Result of the SQL query",
        "Answer": "3"
    },
    {
        "Question": "Calculate the revenues made by Fantasy Films and Live Entertainment. ==>> made by Fantasy Films refers to company_name = 'Fantasy Films'; Live Entertainment refers to company_name = 'Live Entertainment'",
        "SQLQuery": "SELECT SUM(T3.revenue) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name IN ('Fantasy Films', 'Live Entertainment')",
        "SQLResult": "Result of the SQL query",
        "Answer": "124061243"
    },
    {
        "Question": "How many production companies made more than 150 movies? ==>> more than 150 movies refers to COUNT(company_name) > 150",
        "SQLQuery": "SELECT COUNT(*) FROM ( SELECT T1.company_name AS CNAME FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(T1.company_name) > 150 )",
        "SQLResult": "Result of the SQL query",
        "Answer": "6"
    },
    {
        "Question": "Write the person ID and character name of casts between order numbers 1 and 10 in Movie No. 285. ==>> casts between order numbers 1 and 10 refers to cast_order BETWEEN 2 AND 9; Movie No. 285 refers to movie_id = 285",
        "SQLQuery": "SELECT person_id, character_name FROM movie_cast WHERE movie_id = 285 AND cast_order BETWEEN 1 AND 10",
        "SQLResult": "Result of the SQL query",
        "Answer": "114,116,1640,1619,2440,118,1709,2449,2441,2038"
    },
    {
        "Question": "List the names of all the producers in the movie \"Pirates of the Caribbean: At World's End\". ==>> List the names refers to person_name; producers refers to job = 'Producer'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: The Curse of the Black Pearl'",
        "SQLQuery": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T2.job = 'Producer'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Jerry Bruckheimer"
    },
    {
        "Question": "List the movies released in 1945. ==>> List the movies refers to title; released in 1945 refers to release_date LIKE '1945%'",
        "SQLQuery": "SELECT title FROM movie WHERE CAST(STRFTIME('%Y', release_date) AS INT) = 1945",
        "SQLResult": "Result of the SQL query",
        "Answer": "Spellbound,State Fair,The Lost Weekend,The Valley of Decision"
    },
    {
        "Question": "How many Indian movies between 1/2/1990 and 12/30/2003 have revenue of more than 75,000,000 and popularity of no less than 20? ==>> Indian movies refers to country_name = 'India'; between 1/2/1990 and 12/30/2003 refers to release_date BETWEEN '1990-01-02' AND '2003-12-30'; revenue of more than 75,000,000 refers to revenue > 75000000; popularity of no less than 20 refers to popularity > = 20",
        "SQLQuery": "SELECT COUNT(T2.movie_id) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.revenue > 75000000 AND T1.popularity >= 20 AND T1.release_date BETWEEN '1990-01-01' AND '2003-12-31'",
        "SQLResult": "Result of the SQL query",
        "Answer": "429"
    },
    {
        "Question": "List the director's name of the movies released between 1/01/1916 and 12/31/1925. ==>> director's name refers to person_name where job = 'Director'; released between 1/01/1916 and 12/31/1925 refers to release_date BETWEEN '1916-01-02' AND '1925-12-30'",
        "SQLQuery": "SELECT T2.person_name FROM movie_cast AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.person_id INNER JOIN movie AS T3 ON T1.movie_id = T3.movie_id INNER JOIN movie_crew AS T4 ON T1.movie_id = T4.movie_id WHERE T4.job = 'Director' AND T3.release_date BETWEEN '1916-01-01' AND '1925-12-31'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Lillian Gish,Mae Marsh,Robert Harron,F.A. Turner,Sam De Grasse,Vera Lewis,Lillian Langdon,Olga Grey,Erich von Ritzau,Bessie Love,Margery Wilson,Eugene Pallette,Spottiswoode Aitken,Ruth Handforth,Elmer Clifton,Seena Owen,Carl Stockdale,Mary Alden,Pearl Elmore,Julia Mackley,Miriam Cooper,Walter Long,Tom Wilson,Ralph Lewis,Lloyd Ingraham,John P. McCarthy,Monte Blue,Marguerite Marsh,Edward Dillon,Billy Quirk,Howard Gaye,William H. Brown,George Walsh,W.S. Van Dyke,Allan Sears,Frank Bennett,Maxfield Stanley,Josephine Crowell,Constance  Talmadge,W.E. Lawrence,Joseph Henabery,Chandler House,Alfred Paget,Tully Marshall,Dore Davidson,Taylor N. Duncan,Owen Moore,Frank Borzage,Karl Brown,Frank Campeau,Constance Collier,Donald Crisp,Nigel De Brulier,Clarence Geldart,Dell Henderson,Russell Hicks,DeWolf Hopper Sr.,Wilfred Lucas,Francis McDonald,Vester Pegg,Herbert Sutch,Herbert Beerbohm Tree,King Vidor,Hal Wilson,Tammany Young,Sylvia Ashton,Jennie Lee,George Beranger,Kitty Bradbury,Tod Browning,Frank Brownlee,Kate Bruce,Edward Burns,Noble Johnson,George Fawcett,Jewel Carmen,Carol Dempster,Mildred Harris,Daisy Jefferson,Carmel Myers,Eve Southern,Pauline Starke,Natalie Talmadge,Ethel Grey Terry,Francis Carpenter,Virginia Lee Corbin,Peggy Cartwright,Gino Corrado,William Courtright,Erich von Stroheim,Max Davidson,Douglas Fairbanks,Julia Faye,Clyde E. Hopkins,Alberta Lee,Elmo Lincoln,Loyola O'Connor,Wallace Reid,Alma Rubens,Madame Sul-Te-Wan,George Siegmann,Raymond Wells,Winifred Westover,David Butler,John Gilbert,Renu00e9e Adoru00e9e,Hobart Bosworth,Claire McDowell,Claire Adams,Robert Ober,Tom O'Brien,Karl Dane,Kathleen Key,Rosita Marstini,Julanne Johnston"
    },
    {
        "Question": "What is the production company of the movie \"Crazy Heart\"? ==>> movie \"Crazy Heart\" refers to title = 'Crazy Heart'; production company refers to company_name",
        "SQLQuery": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Crazy Heart'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Butcher's Run Films,Fox Searchlight Pictures,Informant Media"
    },
    {
        "Question": "How many crew members worked as producer in the movie \"Pirates of the Caribbean: At World's End\"? ==>> worked as producer refers to job = 'Producer'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "SQLQuery": "SELECT COUNT(T3.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Producer'",
        "SQLResult": "Result of the SQL query",
        "Answer": "5"
    },
    {
        "Question": "Please list the names of all the producers in the movie \"Pirates of the Caribbean: At World's End\". ==>> names refers to person_name; producers refers to job = 'Producer'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "SQLQuery": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Producer'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Jerry Bruckheimer,Eric McLeod,Chad Oman,Peter Kohn,Pat Sandston"
    },
    {
        "Question": "What is the average revenue made by Latin movies? ==>> Latin movies refers to language_name = 'Latin'; average revenue = AVG(revenue)",
        "SQLQuery": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin'",
        "SQLResult": "Result of the SQL query",
        "Answer": "138166823.8846154"
    },
    {
        "Question": "How many producers does the movie \"The Amityville Horror\" have? ==>> producers refers to job = 'Producer'; \"The Amityville Horror\" refers to title = 'The Amityville Horror'",
        "SQLQuery": "SELECT COUNT(T2.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'The Amityville Horror' AND T2.job = 'Producer'",
        "SQLResult": "Result of the SQL query",
        "Answer": "9"
    },
    {
        "Question": "Provide the names and departments of the person who worked as a music editor in the \"Pirates of the Caribbean: At World's End\" movie. ==>> names refers to person_name; departments refers to department_name; worked as a music editor refers to job = 'Music Editor'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "SQLQuery": "SELECT T3.person_name, T4.department_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id INNER JOIN department AS T4 ON T2.department_id = T4.department_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Music Editor'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Melissa Muik,Barbara McDermott,Katie Greathouse"
    },
    {
        "Question": "For the movie \"Reign of Fire\", which department was Marcia Ross in? ==>> movie \"Reign of Fire\" refers to title = 'Reign of Fire'; which department refers to department_name",
        "SQLQuery": "SELECT T4.department_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id INNER JOIN department AS T4 ON T2.department_id = T4.department_id WHERE T3.person_name = 'Marcia Ross' AND T1.title = 'Reign of Fire'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Production"
    },
    {
        "Question": "What is the name of the production company that made the most movies? ==>> name of the production company refers to company_name; most movies refers to max(count(company_name))",
        "SQLQuery": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY COUNT(T2.movie_id) DESC LIMIT 1",
        "SQLResult": "Result of the SQL query",
        "Answer": "Warner Bros."
    },
    {
        "Question": "Write the titles of horror films with a vote average of more than 7. ==>> horror films refers to genre_name = 'Horror'; vote average of more than 7 refers to vote_average > 7",
        "SQLQuery": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND vote_average > 7",
        "SQLResult": "Result of the SQL query",
        "Answer": "28 Days Later,Saw,Alien,A Nightmare on Elm Street,Psycho,Jaws,Interview with the Vampire,Aliens,The Shining,Shaun of the Dead,The Evil Dead,Evil Dead II,Army of Darkness,The Omen,Rosemary's Baby,Videodrome,Halloween,Eraserhead,The Thing,The Devil's Advocate,The Others,Dracula,El orfanato,[REC],They Live,The Exorcist,Night of the Living Dead,The Return of the Living Dead,Zombieland,The Texas Chain Saw Massacre,\u30ad\u30e5\u30a2,Tucker and Dale vs Evil,The Night Visitor,The Conjuring,\uace1\uc131"
    },
    {
        "Question": "What is the average revenue of American movies in 2006? ==>> American movies refers to country_name = 'United States of America'; in 2006 refers to release_date LIKE '2006%'; average revenue = AVG(revenue)",
        "SQLQuery": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'United States of America' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2006",
        "SQLResult": "Result of the SQL query",
        "Answer": "82234025.98404256"
    },
    {
        "Question": "Write all the keywords belonging to the movie 'Sky Captain and the World of Tomorrow.' ==>> keywords refers to keyword_name; movie 'Sky Captain and the World of Tomorrow' refers to title = 'Sky Captain and the World of Tomorrow'",
        "SQLQuery": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.title = 'Sky Captain and the World of Tomorrow'",
        "SQLResult": "Result of the SQL query",
        "Answer": "london england,himalaya,journalist,killer robot,computer war,robot"
    },
    {
        "Question": "Please list the names of all the crew members of the movie \"Pirates of the Caribbean: At World's End\". ==>> names refers to person_name; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "SQLQuery": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End'",
        "SQLResult": "Result of the SQL query",
        "Answer": "Dariusz Wolski,Gore Verbinski,Jerry Bruckheimer,Ted Elliott,Terry Rossio,Stephen E. Rivkin,Craig Wood,Hans Zimmer,Mike Stenson,Eric McLeod,Chad Oman,Peter Kohn,Pat Sandston,Denise Chamian,Rick Heinrichs,John Dexter,Priscilla John,Cheryl Carasik,Liz Dann,Penny Rose,Bob Badami,James Ward Byrkit,Ve Neill,John Dixon,Dottie Starling,Pamela Alch,Allen Hall,Melissa Muik,Sharron Reynolds,Barbara McDermott,Karen Golden,Katie Greathouse"
    },
    {
        "Question": "What is the percentage of male characters in the movie \"Bride Wars\"? ==>> male refers to gender = 'Male'; \"Bride Wars\" refers to title = 'Bride Wars'; percentage = divide(sum(gender = 'Male'), count(gender)) * 100 as percentage",
        "SQLQuery": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Bride Wars'",
        "SQLResult": "Result of the SQL query",
        "Answer": "32.142857142857146"
    }
]